#include "common.cfi"


// Uniform data
float4x4 matViewProj;
float4x4 matWorldViewProj;

float4 auxGeomObjColor;
float3 globalLightLocal;
float2 auxGeomObjShading;


// Structure of vertex shader input for geometries
struct SAuxGeomApp2VS
{
	float4 pos : POSITION;
	float4 col : COLOR0;
};


// Structure of vertex shader input for objects
struct SAuxGeomObjApp2VS
{
	float4 pos : POSITION;
	float3 normal : TEXCOORD0;
};


// Structure of vertex shader output = pixel shader input
struct SAuxVS2PS
{
	float4 pos : POSITION;
	float4 col : COLOR0;
};


// Default vertex shader to transform auxiliary 3D geometries
SAuxVS2PS
AuxGeomVS( SAuxGeomApp2VS IN )
{
  SAuxVS2PS OUT = (SAuxVS2PS) 0;

  OUT.pos = mul( matViewProj, IN.pos );
  OUT.col = GetInputColor( IN.col );

  return OUT;
}


// Default vertex shader to transform auxiliary 3D geometry objects
SAuxVS2PS
AuxGeomObjVS( SAuxGeomObjApp2VS IN )
{
  SAuxVS2PS OUT = (SAuxVS2PS) 0;

  OUT.pos = mul( matWorldViewProj, IN.pos );
  
  float shading = dot( IN.normal, globalLightLocal );
  shading = auxGeomObjShading.x * shading + auxGeomObjShading.y;
  OUT.col = float4( auxGeomObjColor.rgb * shading, auxGeomObjColor.a );

  return OUT;
}


// Default pixel shader to render auxiliary 2D/3D geometries and geometry objects
float4
AuxGeomPS( SAuxVS2PS IN ) : COLOR0
{
  return IN.col;
}


// Default technique for auxiliary geometry rendering
technique AuxGeometry
{
  pass p0
  {
    VertexShader = compile vs_1_1 AuxGeomVS();
    PixelShader = compile ps_1_1 AuxGeomPS();
  }
}


// Default technique for auxiliary geometry objects rendering
technique AuxGeometryObj
{
  pass p0
  {
    VertexShader = compile vs_1_1 AuxGeomObjVS();
    PixelShader = compile ps_1_1 AuxGeomPS();
  }
}
