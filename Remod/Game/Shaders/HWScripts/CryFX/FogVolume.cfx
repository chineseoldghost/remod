#include "Common.cfi"
#include "ModificatorVT.cfi"


float Script : STANDARDSGLOBAL
<
  string Script =
           "ShaderDrawType = General;"
           "ShaderType = PostProcess;"
>;


float4x4 objMatrix				: PI_TransObjMatrix;
float3 cameraFrontVector	: PB_CameraFront;

float3x4	invObjSpaceMatrix;
float4		globalDensity;
float4		outsideSoftEdgesLerp;
float3		eyePosInOS;
float3		eyePosInOSx2 < psregister = PS_REG_PM_0; >;
float4		eyePosInWS   < psregister = PS_REG_PM_1; vsregister = VS_REG_PM_0; >;
float3		fogColor     < psregister = PS_REG_PM_2; >;
float3		heightFallOffBasePoint < psregister = PS_REG_PM_3; >;
float3		heightFallOffDirScaled < psregister = PS_REG_PM_4; >;


sampler2D sceneDepthSampler = sampler_state
{
	Texture = $ZTarget;
	MinFilter = POINT;
	MagFilter = POINT;
	MipFilter = POINT;
	AddressU = Clamp;
	AddressV = Clamp;
};


struct a2v
{
  float4 Position : POSITION; 
};


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ellipsoid
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


struct v2f_ellipsoid
{
  float4 hPos					: POSITION;   
  float3 eyeDirInWS		: TEXCOORDN;  
  float3 eyeDirInOS		: TEXCOORDN;  
  float4 hPosTexProj	: TEXCOORDN;
};


v2f_ellipsoid FogVolumeEllipsoidVS( a2v IN )
{
  v2f_ellipsoid OUT = (v2f_ellipsoid) 0; 

  float4 vPos = IN.Position;
  float4 hPos = mul( vpMatrix, vPos );
  
  OUT.hPos = hPos;
  // multiply homogeneous z by either zero (inside) or one (outside) to prevent far clipping plane artifacts if we're inside a huge fog volume
  OUT.hPos.z *= eyePosInWS.w; 

  OUT.hPosTexProj = hPos;
	OUT.hPosTexProj.x = (  OUT.hPosTexProj.x + OUT.hPosTexProj.w ) * 0.5;
	OUT.hPosTexProj.y = ( -OUT.hPosTexProj.y + OUT.hPosTexProj.w ) * 0.5;
#ifndef D3D10
	// compiler bug in fxc10 incorrecly compiles the following line "add half a texel", put it back in once compiler is fixed
	OUT.hPosTexProj.xy += g_VS_ScreenSize.zw * OUT.hPosTexProj.w;
#endif
	OUT.eyeDirInWS = mul( (float3x4) objMatrix, vPos ) - eyePosInWS.xyz;  
  OUT.eyeDirInOS = mul( (float3x3) invObjSpaceMatrix, OUT.eyeDirInWS.xyz );  
  
  return OUT;
}


pixout FogVolumeEllipsoidPS( v2f_ellipsoid IN )
{
  pixout OUT = (pixout) 0;

  // Debug output
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   DebugOutput(OUT.Color, float4(0, 0, 0, 1));
   return OUT;
 #endif
  
	// setup ray tracing in OS
  float3 cameraPosInOSx2 = eyePosInOSx2;  
	float3 cameraLookDirInOS = IN.eyeDirInOS; //mul( (float3x3) invObjSpaceMatrix, IN.eyeDirInWS.xyz );
	
	float invOfScaledCamDirLength = rsqrt( dot( cameraLookDirInOS, cameraLookDirInOS ) );
	cameraLookDirInOS *= invOfScaledCamDirLength;
		
	// calc coefficients for ellipsoid parametrization (just a simple unit-sphere in its own space)	
	float B = dot( cameraPosInOSx2, cameraLookDirInOS );
	float Bsq = B * B;	
	float C = dot( cameraPosInOSx2, cameraPosInOSx2 ) - 4.0;
			
	// solve quadratic equation
	float discr = Bsq - C;		
	clip( discr ); // if( discr >= 0.0 ) then ray hit
	//clip( discr - Bsq );
	float discrSqrt = sqrt( discr );	
	//clip( discrSqrt - B ); // now handled by "tE = max( ... );" below
		
	// ray hit
	float3 cameraPosInWS = eyePosInWS.xyz;  
	float3 cameraLookDirInWS = IN.eyeDirInWS.xyz * invOfScaledCamDirLength;

	////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////	
/*
	float tS = max( 0.5 * ( -B - discrSqrt ), 0.0 );		
	float3 front = cameraPosInWS + tS * cameraLookDirInWS;
			
	float tE = max( 0.5 * ( -B + discrSqrt ), 0.0 );		
	float3 back = cameraPosInWS + tE * cameraLookDirInWS;

	float d = dot( cameraPosInWS, -cameraFrontVector );		
	float t0 = dot( front, -cameraFrontVector );		
	float t1 = dot( back, -cameraFrontVector );

	float sceneDepth = DecodeSceneDepth( sceneDepthSampler, IN.hPosTexProj ) + d;	
	sceneDepth = min( sceneDepth, t1 );
	back = lerp( front, back, saturate( ( sceneDepth - t0 ) / ( t1 - t0 ) ) );

	float3 dist = back - front;
	float fogInt = length( dist ) * exp( -dot( front - heightFallOffBasePoint, heightFallOffDirScaled ) );	
*/		
	////////////////////////////////////////////////////////////////////////

	//float tS = max( 0.5 * ( -B - discrSqrt ), 0.0 ); // clamp to zero so front ray-ellipsoid intersection is NOT behind camera
	//float tE = max( 0.5 * ( -B + discrSqrt ), 0.0 ); // clamp to zero so back ray-ellipsoid intersection is NOT behind camera		
	
	float2 t = max( 0, 0.5 * float2( -B - discrSqrt, -B + discrSqrt ) );
	float tS = t.x;
	float tE = t.y;
	
	float sceneDepth = DecodeSceneDepth( sceneDepthSampler, IN.hPosTexProj );
	float tI = sceneDepth / dot( cameraLookDirInWS, -cameraFrontVector );		
	tI = max( tS, min( tI, tE ) ); // clamp to range [tS, tE]

	float3 front = tS * cameraLookDirInWS + cameraPosInWS;
	//float3 back = tI * cameraLookDirInWS + cameraPosInWS;

	float3 dist = ( tI - tS ) * cameraLookDirInWS;
	float distLength = length( dist );
	float fogInt = distLength * exp( -dot( front - heightFallOffBasePoint, heightFallOffDirScaled ) );	

	////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////
	
	float heightDiff = dot( dist, heightFallOffDirScaled );
	if( abs( heightDiff ) > 0.001 )
		fogInt *= ( 1.0 - exp( -heightDiff ) ) / heightDiff;

  if (GetShaderQuality() > QUALITY_LOW)
  {
		float softArg = saturate( discr * outsideSoftEdgesLerp.x + outsideSoftEdgesLerp.y );
		//fogInt *= softArg;
		fogInt *= softArg * ( 2 - softArg );
		//fogInt *= smoothstep( 0.0, 1.0, softArg );
	}

	float fog = 1 - exp2( -globalDensity.y * fogInt );			
	OUT.Color = float4( fogColor.xyz, fog );

  return OUT;
}


technique Ellipsoid
{
  pass p0
  {
    VertexShader = compile vs_Auto FogVolumeEllipsoidVS();

    ZEnable = false;
    ZWriteEnable = false;
    CullMode = Front;

    SrcBlend = SrcAlpha;
    DestBlend = InvSrcAlpha;
    AlphaBlendEnable = true;
    ColorWriteEnable = RED|GREEN|BLUE;

    PixelShader = compile ps_Auto FogVolumeEllipsoidPS();
  }
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Box
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


struct v2f_box
{
  float4 hPos					: POSITION;
  float3 eyeDirInWS		: TEXCOORDN;
  float3 eyeDirInOS		: TEXCOORDN;
  float4 hPosTexProj	: TEXCOORDN;
  float3 tPosPlane		: TEXCOORDN;
  float3 tNegPlane		: TEXCOORDN;
};


v2f_box FogVolumeBoxVS( a2v IN )
{
  v2f_box OUT = (v2f_box) 0; 

  float4 vPos = IN.Position;
  float4 hPos = mul( vpMatrix, vPos );
  
  OUT.hPos = hPos;
  // multiply homogeneous z by either zero (inside) or one (outside) to prevent far clipping plane artifacts if we're inside a huge fog volume
  OUT.hPos.z *= eyePosInWS.w; 

  OUT.hPosTexProj = hPos;
	OUT.hPosTexProj.x = (  OUT.hPosTexProj.x + OUT.hPosTexProj.w ) * 0.5;
	OUT.hPosTexProj.y = ( -OUT.hPosTexProj.y + OUT.hPosTexProj.w ) * 0.5;
#ifndef D3D10
	// compiler bug in fxc10 incorrecly compiles the following line "add half a texel", put it back in once compiler is fixed
	OUT.hPosTexProj.xy += g_VS_ScreenSize.zw * OUT.hPosTexProj.w;
#endif
	OUT.eyeDirInWS = mul( (float3x4) objMatrix, vPos ) - eyePosInWS.xyz;
  OUT.eyeDirInOS = mul( (float3x3) invObjSpaceMatrix, OUT.eyeDirInWS.xyz );  
    
	OUT.tPosPlane =  1 - eyePosInOS;
	OUT.tNegPlane = -1 - eyePosInOS;  
  
  return OUT;
}


pixout FogVolumeBoxPS( v2f_box IN )
{
  pixout OUT = (pixout) 0;

	// Debug output
 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   DebugOutput(OUT.Color, float4(0, 0, 0, 1));
   return OUT;
 #endif

	// setup ray tracing in OS
	float3 cameraLookDirInOS = IN.eyeDirInOS;
	
	float invOfScaledCamDirLength = rsqrt( dot( cameraLookDirInOS, cameraLookDirInOS ) );
	cameraLookDirInOS *= invOfScaledCamDirLength;

	float3 invCameraLookDirInOS = 1 / cameraLookDirInOS;
	float3 tPosPlane = IN.tPosPlane * invCameraLookDirInOS;
	float3 tNegPlane = IN.tNegPlane * invCameraLookDirInOS;
	
	float3 tFrontFace = cameraLookDirInOS > 0 ? tNegPlane : tPosPlane;
	float3 tBackFace = cameraLookDirInOS > 0 ? tPosPlane : tNegPlane;	
	
	// filter any NAN introduced by division above in case cameraLookDirInOS is parallel to front/back planes of fog volume box		
	tFrontFace = max( min( tFrontFace, (float3)10000000 ), (float3)-10000000 ); //tFrontFace = tFrontFace > 10000000 ? 0 : tFrontFace;
	tBackFace = max( min( tBackFace, (float3)10000000 ), (float3)-10000000 ); //tBackFace = tBackFace > 10000000 ? 0 : tBackFace;

	//float tS = max( 0, max( tFrontFace.x, max( tFrontFace.y, tFrontFace.z ) ) );
	//float tE = max( 0, min( tBackFace.x, min( tBackFace.y, tBackFace.z ) ) );
	
	float2 t = max( 0, float2( max( tFrontFace.x, max( tFrontFace.y, tFrontFace.z ) ), 
		min( tBackFace.x, min( tBackFace.y, tBackFace.z ) ) ) );
		
	float tS = t.x;
	float tE = t.y;
	
	float3 cameraPosInWS = eyePosInWS.xyz;  
	float3 cameraLookDirInWS = IN.eyeDirInWS.xyz * invOfScaledCamDirLength;

	////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////	
	
	float sceneDepth = DecodeSceneDepth( sceneDepthSampler, IN.hPosTexProj );
	float tI = sceneDepth / dot( cameraLookDirInWS, -cameraFrontVector );		
	tI = max( tS, min( tI, tE ) ); // clamp to range [tS, tE]

	float3 front = tS * cameraLookDirInWS + cameraPosInWS;
	//float3 back = tI * cameraLookDirInWS + cameraPosInWS;

	float3 dist = ( tI - tS ) * cameraLookDirInWS;
	float distLength = length( dist );
	float fogInt = distLength * exp( -dot( front - heightFallOffBasePoint, heightFallOffDirScaled ) );	

	////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////
	
	float heightDiff = dot( dist, heightFallOffDirScaled );
	if( abs( heightDiff ) > 0.001 )
		fogInt *= ( 1.0 - exp( -heightDiff ) ) / heightDiff;

	float fog = 1 - exp2( -globalDensity.y * fogInt );
	OUT.Color = float4( fogColor.xyz, fog );
	
	return( OUT );
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


technique Box
{
  pass p0
  {
    VertexShader = compile vs_Auto FogVolumeBoxVS();

    ZEnable = false;
    ZWriteEnable = false;
    CullMode = Front;

    SrcBlend = SrcAlpha;
    DestBlend = InvSrcAlpha;
    AlphaBlendEnable = true;

    ColorWriteEnable = RED|GREEN|BLUE;

    PixelShader = compile ps_Auto FogVolumeBoxPS();
  }
}
