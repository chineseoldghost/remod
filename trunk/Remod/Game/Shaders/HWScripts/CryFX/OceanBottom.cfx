
#include "Common.cfi"
#include "ModificatorVT.cfi"
#include "ModificatorTC.cfi"

float Script : STANDARDSGLOBAL
<
  string Script =
           "Public;"
           "NoPreview;"           
           "LocalConstants;"
           "ForceGeneralPass;"
           "ShaderDrawType = General;"                      
           "ShaderType = Water;"
>;

/// Un-Tweakables //////////////////////
float4x4 mViewProj : PI_Composite; // view projection matrix
float4x4 mViewProjI : PB_UnProjMatrix;  // invert( view projection matrix )
float4x4 mWorldT : PI_TransObjMatrix;
float4x4 mCamera : PB_CameraMatrix_I;

float4 g_fWaterLevel : PB_WaterLevel;

float4x4 mReflProj : PI_TexMatrix
<
  string 'Sampler' (envMapSamplerRefl)
>;

struct a2vWater
{
  float4 Position : POSITION;
};

struct v2fWaterBottom
{
  float4 Position  : POSITION; 
};

struct v2fWaterBottomZpass
{
  float4 Position  : POSITION; 
  float4 ZInfo     : TEXCOORD0_centroid;
};

// Get vertex from screen space into world spasace
void GetGridVertexPos( inout float4 vPos )
{ 
  const float fGridQuadSize = 1.0 / (200.0);
  vPos.xy = ((vPos.xy  + fGridQuadSize)* 2 - 1);
  //vPos.xy = vPos.xy* 2 - 1;
  
  // BFH: make sure edges go out of screen - todo: find better solution for this
  //vPos.xy *= (1.0 +  fGridQuadSize*10);
  vPos.xy *= 2.0;
  
  // BFH: make sure edges go out of screen - todo: find better solution for this
  //vPos.y *= 1.1;
   
  vPos.z = 0.0;
  vPos.w = 1.0;
  float4 vPosWS = mul( mViewProjI, vPos );
  vPosWS /= vPosWS.w;
  
  float3 view = g_VS_WorldViewPos.xyz - float3(vPosWS.xy, 0);  
 float fDirSign = sign(view.z); // make sure to invert sign when bellow water

  // get z plane intersections
  float2 z_isecs = float2( max(fDirSign*g_VS_WorldViewPos.z - fDirSign*vPosWS.z, 0.05 / g_VS_NearFarClipDist.y),
                           fDirSign*g_VS_WorldViewPos.z );
  //z_isecs *= fDirSign;
  //z_isecs = max(z_isecs, 0.00001);
 
  // clamp t just in case
  float  t = min( z_isecs.y / z_isecs.x, g_VS_NearFarClipDist.y * 5.0 );
          
  // project vertex along ray direction
  float2 vRayDir = (vPosWS.xy - g_VS_WorldViewPos.xy);        
  vPos.xy = g_VS_WorldViewPos.xy + vRayDir.xy * t;
  
  vPos.z = 0;
}

///////////////// Ocean bottom  //////////////////

v2fWaterBottom OceanBottomVS(a2vWater IN)
{
  v2fWaterBottom OUT;
#ifndef OPENGL    	
  OUT = (v2fWaterBottom)1; 
#endif
  // Position in screen space.
  float4 vPos =IN.Position;
  GetGridVertexPos( vPos );
  vPos.z = 0;
  vPos.w =1;

  OUT.Position = mul(mViewProj, vPos);                                                           // 4 alu
  OUT.Position.w -= 0.01;

  return OUT;
}

pixout OceanBottomPS( v2fWaterBottom IN )
{
  pixout OUT = (pixout) 0;
  OUT.Color.xyz = float3(0,0,0);
  OUT.Color.w = 1;
  return OUT;
}


v2fWaterBottomZpass OceanBottomZpassVS(a2vWater IN)
{
  v2fWaterBottomZpass OUT;
#ifndef OPENGL    	
  OUT = (v2fWaterBottomZpass)1; 
#endif
  // Position in screen space.
  float4 vPos =IN.Position;
  GetGridVertexPos( vPos );
  vPos.z = 00;
  vPos.w =1;

  OUT.Position = mul(mViewProj, vPos);                                                           // 4 alu



#if %_RT_FSAA
  OUT.ZInfo.yzw = vPos;
#endif     
  OUT.ZInfo.x = OUT.Position.w * g_VS_NearFarClipDist.w;

  OUT.Position.w -= 0.01;  

  return OUT;
}

pixout OceanBottomZpassPS( v2fWaterBottomZpass IN )
{
  pixout OUT = (pixout) 1;
	float fZ = IN.ZInfo.x;

  #if !%_RT_FSAA
		OUT.Color = EncodeSceneDepthNoAlpha(fZ, 0, half3(0,0,0));
  #else
    OUT.Color = EncodeSceneDepthNoAlpha(fZ, 0, IN.ZInfo.yzw);
  #endif

  return OUT;
}

//////////////////////////////// technique ////////////////

technique General
<
  string Script = 
  "TechniqueZ=ZPass;"
>
{  
  pass p0
  {
    
    ZEnable = true;
    ZFunc = Equal;
    ZWriteEnable = false;
    CullMode = None; 
    IgnoreMaterialState = true;
    SrcBlend = ONE;
    DestBlend = ZERO; //ONE_MINUS_SRC_ALPHA;
    AlphaBlendEnable = false;                
    //ColorWriteEnable = RED|GREEN|BLUE;

    VertexShader = compile vs_Auto OceanBottomVS() GeneralVS;
    PixelShader = compile ps_Auto OceanBottomPS() GeneralPS;
  }
}

technique ZPass
{
  pass p0
  {
    
    ZEnable = true;
    ZWriteEnable = true;
    CullMode = None; 
    IgnoreMaterialState = true;

    VertexShader = compile vs_Auto OceanBottomZpassVS() ZVS;
    PixelShader = compile ps_Auto OceanBottomZpassPS() ZPS;
  }
}